from unittest import TestCase, main

import numpy as np

from yaaf.agents import GreedyMDPAgent
from yaaf.environments.markov import CliffWalkMDP
from yaaf.environments.markov.WindyGridWorldMDP import WindyGridWorldMDP
from yaaf.evaluation.TimestepsPerEpisodeMetric import TimestepsPerEpisodeMetric
from yaaf.execution import EpisodeRunner


class MDPSolverTests(TestCase):

    @staticmethod
    def _test_mdp_optimal_policy(mdp, optimal_steps_to_solve, episodes=100):
        agent = GreedyMDPAgent(mdp)
        metric = TimestepsPerEpisodeMetric()
        runner = EpisodeRunner(episodes, agent, mdp, [metric])
        runner.run()
        assert metric.result().mean() == optimal_steps_to_solve and metric.result().std() == 0.0

    def test_windy_grid_world_optimal_policy(self):
        self._test_mdp_optimal_policy(WindyGridWorldMDP(), 15, episodes=100)

    def test_cliff_walk_optimal_policy(self):
        self._test_mdp_optimal_policy(CliffWalkMDP(), 13, episodes=100)

    def test_windy_grid_world_value_iteration(self):

        """This test compares the solution from the MDP interface with the WindyGridWorld's solution."""

        mdp = WindyGridWorldMDP()
        q_values = mdp.optimal_q_values  # keep arguments due to expected q_star
        expected_q_values = np.array([
            [-88.97864878, -88.97864878, -88.97864878, -88.86732201],
            [-88.86732201, -88.86732201, -88.97864878, -88.75487073],
            [-88.75487073, -88.75487073, -88.86732201, -88.64128358],
            [-88.64128358, -88.64128358, -88.75487073, -88.52654908],
            [-88.52654908, -88.52654908, -88.64128358, -88.41065565],
            [-88.41065565, -88.41065565, -88.52654908, -88.29359158],
            [-88.29359158, -88.29359158, -88.41065565, -88.17534503],
            [-88.17534503, -88.17534503, -88.29359158, -88.05590408],
            [-88.05590408, -88.05590408, -88.17534503, -87.93525666],
            [-87.93525666, -87.81339058, -88.05590408, -87.93525666],
            [-88.97864878, -88.97864878, -88.97864878, -88.86732201],
            [-88.86732201, -88.86732201, -88.97864878, -88.75487073],
            [-88.75487073, -88.75487073, -88.86732201, -88.64128358],
            [-88.64128358, -88.64128358, -88.75487073, -88.52654908],
            [-88.52654908, -88.52654908, -88.64128358, -88.41065565],
            [-88.41065565, -88.41065565, -88.52654908, -88.29359158],
            [-88.29359158, -88.29359158, -88.41065565, -88.17534503],
            [-88.17534503, -88.17534503, -88.29359158, -88.05590408],
            [-88.05590408, -88.05590408, -88.17534503, -87.93525666],
            [-87.93525666, -87.69029353, -88.05590408, -87.81339058],
            [-88.97864878, -88.97864878, -88.97864878, -88.86732201],
            [-88.86732201, -88.86732201, -88.97864878, -88.75487073],
            [-88.75487073, -88.75487073, -88.86732201, -88.64128358],
            [-88.64128358, -88.64128358, -88.75487073, -88.52654908],
            [-88.52654908, -88.52654908, -88.64128358, -88.41065565],
            [-88.41065565, -88.41065565, -88.52654908, -88.29359158],
            [-88.29359158, -88.29359158, -88.41065565, -88.17534503],
            [-88.17534503, -88.17534503, -88.29359158, -88.05590408],
            [-88.05590408, -87.93525666, -88.17534503, -87.81339058],
            [-87.81339058, -87.56595307, -87.93525666, -87.69029353],
            [-88.97864878, -88.97864878, -88.97864878, -88.86732201],
            [-88.86732201, -88.86732201, -88.97864878, -88.75487073],
            [-88.75487073, -88.75487073, -88.86732201, -88.64128358],
            [-88.64128358, -88.64128358, -88.75487073, -88.52654908],
            [-88.52654908, -88.52654908, -88.64128358, -88.41065565],
            [-88.41065565, -88.41065565, -88.52654908, -88.29359158],
            [-88.29359158, -88.29359158, -88.41065565, -88.17534503],
            [-87.17534503, -87.17534503, -87.29359158, -87.05590408],
            [-88.05590408, -87.81339058, -88.17534503, -87.69029353],
            [-87.69029353, -87.44035665, -87.81339058, -87.56595307],
            [-88.97864878, -88.97864878, -88.97864878, -88.86732201],
            [-88.86732201, -88.86732201, -88.97864878, -88.75487073],
            [-88.75487073, -88.75487073, -88.86732201, -88.64128358],
            [-88.64128358, -88.64128358, -88.75487073, -88.52654908],
            [-88.52654908, -88.52654908, -88.64128358, -88.41065565],
            [-88.41065565, -88.41065565, -88.52654908, -88.29359158],
            [-88.29359158, -88.29359158, -88.41065565, -88.17534503],
            [-88.17534503, -87.18534503, -88.29359158, -87.93525666],
            [-87.93525666, -87.31349158, -87.18534503, -87.56595307],
            [-87.56595307, -87.56595307, -87.31349158, -87.44035665],
            [-88.97864878, -88.97864878, -88.97864878, -88.86732201],
            [-88.86732201, -88.86732201, -88.97864878, -88.75487073],
            [-88.75487073, -88.75487073, -88.86732201, -88.64128358],
            [-88.64128358, -88.64128358, -88.75487073, -88.52654908],
            [-88.52654908, -88.52654908, -88.64128358, -88.41065565],
            [-88.41065565, -88.41065565, -88.52654908, -88.29359158],
            [-88.29359158, -88.29359158, -88.41065565, -87.18534503],
            [-88.17534503, -87.31349158, -88.29359158, -87.81339058],
            [-87.81339058, -87.44035665, -87.31349158, -87.44035665],
            [-87.44035665, -87.56595307, -87.44035665, -87.56595307],
            [-88.97864878, -88.97864878, -88.97864878, -88.86732201],
            [-88.86732201, -88.86732201, -88.97864878, -88.75487073],
            [-88.75487073, -88.75487073, -88.86732201, -88.64128358],
            [-88.64128358, -88.64128358, -88.75487073, -88.52654908],
            [-88.52654908, -88.52654908, -88.64128358, -88.41065565],
            [-88.41065565, -87.44035665, -88.52654908, -87.31349158],
            [-88.29359158, -87.31349158, -88.41065565, -87.31349158],
            [-87.18534503, -87.44035665, -88.29359158, -87.31349158],
            [-87.31349158, -87.44035665, -87.44035665, -87.56595307],
            [-87.56595307, -87.56595307, -87.44035665, -87.56595307]
        ])
        assert np.array_equal(q_values.round(3), expected_q_values.round(3))



if __name__ == '__main__':
    main()
